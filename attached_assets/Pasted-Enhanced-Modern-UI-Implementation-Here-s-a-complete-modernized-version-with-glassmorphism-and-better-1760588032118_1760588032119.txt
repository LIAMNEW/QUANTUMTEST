Enhanced Modern UI Implementation
Here's a complete modernized version with glassmorphism and better UX:
Enhanced modern_app.py
pythonimport streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import time
from datetime import datetime, timedelta
import logging
from typing import Dict, List, Optional

# Import your modules
from data_processor import DataProcessor
from ai_model import FraudDetectionModel
from database import db_manager

# Configure page
st.set_page_config(
    page_title="QuantumGuard AI",
    page_icon="üõ°Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Enhanced custom CSS with glassmorphism
st.markdown("""
<style>
    /* Main theme colors */
    :root {
        --primary-color: #6366f1;
        --secondary-color: #8b5cf6;
        --accent-color: #06b6d4;
        --success-color: #10b981;
        --warning-color: #f59e0b;
        --danger-color: #ef4444;
        --dark-bg: #0f172a;
        --card-bg: rgba(30, 41, 59, 0.7);
        --glass-border: rgba(255, 255, 255, 0.1);
    }
    
    /* Glass morphism effect */
    .glass-card {
        background: rgba(30, 41, 59, 0.7);
        backdrop-filter: blur(10px);
        border-radius: 16px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        padding: 1.5rem;
        box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
    }
    
    /* Hide default Streamlit elements */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    
    /* Custom scrollbar */
    ::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }
    
    ::-webkit-scrollbar-track {
        background: #1e293b;
        border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb {
        background: #475569;
        border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: #64748b;
    }
    
    /* Animated gradient background */
    .stApp {
        background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #0f172a 100%);
        background-size: 200% 200%;
        animation: gradientShift 15s ease infinite;
    }
    
    @keyframes gradientShift {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
    }
    
    /* Metric cards with glow effect */
    .metric-card {
        background: rgba(30, 41, 59, 0.6);
        backdrop-filter: blur(10px);
        border-radius: 12px;
        padding: 1.5rem;
        border: 1px solid rgba(99, 102, 241, 0.3);
        transition: all 0.3s ease;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .metric-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 24px rgba(99, 102, 241, 0.3);
        border-color: rgba(99, 102, 241, 0.6);
    }
    
    /* Animated number counter */
    @keyframes countUp {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .metric-value {
        font-size: 2.5rem;
        font-weight: 700;
        background: linear-gradient(135deg, #6366f1, #8b5cf6);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        animation: countUp 0.6s ease-out;
    }
    
    /* Status badges */
    .status-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.875rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }
    
    .status-critical {
        background: rgba(239, 68, 68, 0.2);
        color: #fca5a5;
        border: 1px solid rgba(239, 68, 68, 0.3);
    }
    
    .status-high {
        background: rgba(245, 158, 11, 0.2);
        color: #fcd34d;
        border: 1px solid rgba(245, 158, 11, 0.3);
    }
    
    .status-medium {
        background: rgba(59, 130, 246, 0.2);
        color: #93c5fd;
        border: 1px solid rgba(59, 130, 246, 0.3);
    }
    
    .status-low {
        background: rgba(16, 185, 129, 0.2);
        color: #6ee7b7;
        border: 1px solid rgba(16, 185, 129, 0.3);
    }
    
    /* Button styling */
    .stButton > button {
        background: linear-gradient(135deg, #6366f1, #8b5cf6);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 2rem;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 4px 14px 0 rgba(99, 102, 241, 0.4);
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 24px 0 rgba(99, 102, 241, 0.6);
    }
    
    /* Tab styling */
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
        background: rgba(30, 41, 59, 0.5);
        backdrop-filter: blur(10px);
        border-radius: 12px;
        padding: 0.5rem;
    }
    
    .stTabs [data-baseweb="tab"] {
        border-radius: 8px;
        padding: 0.75rem 1.5rem;
        background: transparent;
        color: #94a3b8;
        border: none;
        font-weight: 600;
        transition: all 0.3s ease;
    }
    
    .stTabs [aria-selected="true"] {
        background: linear-gradient(135deg, #6366f1, #8b5cf6);
        color: white;
        box-shadow: 0 4px 12px rgba(99, 102, 241, 0.4);
    }
    
    /* Loading animation */
    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }
    
    .loading-pulse {
        animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }
    
    /* Chart container */
    .chart-container {
        background: rgba(30, 41, 59, 0.5);
        backdrop-filter: blur(10px);
        border-radius: 12px;
        padding: 1rem;
        border: 1px solid rgba(255, 255, 255, 0.05);
    }
    
    /* Sidebar styling */
    [data-testid="stSidebar"] {
        background: rgba(15, 23, 42, 0.95);
        backdrop-filter: blur(10px);
        border-right: 1px solid rgba(255, 255, 255, 0.05);
    }
    
    /* Success/Error messages */
    .stAlert {
        background: rgba(30, 41, 59, 0.8);
        backdrop-filter: blur(10px);
        border-radius: 12px;
        border-left: 4px solid;
        animation: slideIn 0.3s ease-out;
    }
    
    @keyframes slideIn {
        from {
            opacity: 0;
            transform: translateX(-20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    /* Data table styling */
    .dataframe {
        background: rgba(30, 41, 59, 0.6);
        backdrop-filter: blur(10px);
        border-radius: 8px;
    }
    
    /* Risk indicator */
    .risk-indicator {
        width: 100%;
        height: 8px;
        background: rgba(71, 85, 105, 0.3);
        border-radius: 4px;
        overflow: hidden;
        position: relative;
    }
    
    .risk-bar {
        height: 100%;
        border-radius: 4px;
        transition: width 1s ease-out;
        background: linear-gradient(90deg, #10b981, #f59e0b, #ef4444);
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state
def init_session_state():
    defaults = {
        'data_processor': DataProcessor(),
        'model': FraudDetectionModel(),
        'data': None,
        'predictions': None,
        'analysis_complete': False,
        'current_page': 'home',
        'uploaded_filename': None,
        'analysis_timestamp': None
    }
    
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value

init_session_state()

# Header with logo and title
def render_header():
    col1, col2, col3 = st.columns([1, 3, 1])
    
    with col2:
        st.markdown("""
            <div style="text-align: center; padding: 2rem 0;">
                <h1 style="
                    font-size: 3rem;
                    font-weight: 800;
                    background: linear-gradient(135deg, #6366f1, #8b5cf6, #06b6d4);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    margin-bottom: 0.5rem;
                ">
                    üõ°Ô∏è QuantumGuard AI
                </h1>
                <p style="
                    color: #94a3b8;
                    font-size: 1.1rem;
                    font-weight: 500;
                ">
                    Advanced Blockchain Transaction Analytics & AUSTRAC Compliance
                </p>
            </div>
        """, unsafe_allow_html=True)

# Animated metric card
def metric_card(label, value, delta=None, icon="üìä"):
    delta_html = ""
    if delta is not None:
        delta_color = "#10b981" if delta >= 0 else "#ef4444"
        delta_arrow = "‚Üë" if delta >= 0 else "‚Üì"
        delta_html = f"""
            <div style="color: {delta_color}; font-size: 0.9rem; margin-top: 0.5rem;">
                {delta_arrow} {abs(delta):.1f}%
            </div>
        """
    
    return f"""
        <div class="metric-card">
            <div style="display: flex; align-items: center; gap: 0.75rem; margin-bottom: 0.5rem;">
                <span style="font-size: 1.5rem;">{icon}</span>
                <span style="color: #94a3b8; font-size: 0.875rem; text-transform: uppercase; letter-spacing: 0.05em;">
                    {label}
                </span>
            </div>
            <div class="metric-value">{value}</div>
            {delta_html}
        </div>
    """

# Home/Dashboard page
def render_home():
    render_header()
    
    # Quick stats if data is loaded
    if st.session_state.predictions is not None:
        df = st.session_state.predictions
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown(metric_card(
                "Total Transactions",
                f"{len(df):,}",
                icon="üìä"
            ), unsafe_allow_html=True)
        
        with col2:
            anomaly_rate = (df['is_anomaly'].sum() / len(df) * 100)
            st.markdown(metric_card(
                "Anomaly Rate",
                f"{anomaly_rate:.1f}%",
                delta=-2.3,
                icon="‚ö†Ô∏è"
            ), unsafe_allow_html=True)
        
        with col3:
            high_risk = (df['risk_score'] > 70).sum()
            st.markdown(metric_card(
                "High Risk",
                f"{high_risk:,}",
                icon="üö®"
            ), unsafe_allow_html=True)
        
        with col4:
            total_volume = df['amount'].sum() if 'amount' in df.columns else 0
            st.markdown(metric_card(
                "Total Volume",
                f"${total_volume:,.0f}",
                delta=5.7,
                icon="üí∞"
            ), unsafe_allow_html=True)
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        # Risk distribution chart
        st.markdown("""
            <div class="chart-container">
                <h3 style="color: white; margin-bottom: 1rem;">üìà Risk Distribution Overview</h3>
            </div>
        """, unsafe_allow_html=True)
        
        fig = create_risk_distribution_chart(df)
        st.plotly_chart(fig, use_container_width=True)
    
    else:
        # Welcome state
        st.markdown("""
            <div style="
                text-align: center;
                padding: 4rem 2rem;
                background: rgba(30, 41, 59, 0.5);
                backdrop-filter: blur(10px);
                border-radius: 16px;
                border: 1px solid rgba(255, 255, 255, 0.05);
                margin: 2rem 0;
            ">
                <div style="font-size: 4rem; margin-bottom: 1rem;">üöÄ</div>
                <h2 style="color: white; margin-bottom: 1rem;">Ready to Analyze Blockchain Transactions</h2>
                <p style="color: #94a3b8; font-size: 1.1rem; max-width: 600px; margin: 0 auto 2rem;">
                    Upload your transaction data to unlock powerful AI-driven insights and AUSTRAC compliance analysis
                </p>
            </div>
        """, unsafe_allow_html=True)
        
        # Feature cards
        col1, col2, col3 = st.columns(3)
        
        features = [
            ("ü§ñ", "AI-Powered Detection", "Machine learning algorithms identify unusual patterns"),
            ("üîê", "Quantum-Resilient", "Future-proofed with post-quantum cryptography"),
            ("üìä", "Real-Time Monitoring", "Instant analysis of blockchain transactions")
        ]
        
        for col, (icon, title, desc) in zip([col1, col2, col3], features):
            with col:
                st.markdown(f"""
                    <div class="glass-card" style="text-align: center; height: 200px; display: flex; flex-direction: column; justify-content: center;">
                        <div style="font-size: 3rem; margin-bottom: 1rem;">{icon}</div>
                        <h4 style="color: white; margin-bottom: 0.5rem;">{title}</h4>
                        <p style="color: #94a3b8; font-size: 0.9rem;">{desc}</p>
                    </div>
                """, unsafe_allow_html=True)

# Create enhanced risk distribution chart
def create_risk_distribution_chart(df):
    fig = make_subplots(
        rows=1, cols=2,
        subplot_titles=("Risk Score Distribution", "Anomaly Detection"),
        specs=[[{"type": "histogram"}, {"type": "pie"}]]
    )
    
    # Histogram
    fig.add_trace(
        go.Histogram(
            x=df['risk_score'],
            nbinsx=50,
            marker=dict(
                color=df['risk_score'],
                colorscale='Viridis',
                showscale=True
            ),
            name="Risk Distribution"
        ),
        row=1, col=1
    )
    
    # Pie chart
    anomaly_counts = df['is_anomaly'].value_counts()
    fig.add_trace(
        go.Pie(
            labels=['Normal', 'Anomaly'],
            values=[anomaly_counts.get(0, 0), anomaly_counts.get(1, 0)],
            marker=dict(colors=['#10b981', '#ef4444']),
            hole=0.4
        ),
        row=1, col=2
    )
    
    fig.update_layout(
        template="plotly_dark",
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        height=400,
        showlegend=False
    )
    
    return fig

# Enhanced data upload page
def render_upload():
    st.markdown("""
        <h2 style="color: white; margin-bottom: 2rem;">
            üìÅ Upload Transaction Data
        </h2>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
            <div class="glass-card">
                <h3 style="color: white; margin-bottom: 1rem;">Upload Your Dataset</h3>
                <p style="color: #94a3b8; margin-bottom: 1rem;">
                    Supports CSV files with blockchain or banking transaction data
                </p>
            </div>
        """, unsafe_allow_html=True)
        
        uploaded_file = st.file_uploader(
            "",
            type=['csv'],
            help="Upload a CSV file containing transaction data",
            label_visibility="collapsed"
        )
    
    with col2:
        st.markdown("""
            <div class="glass-card">
                <h4 style="color: white; margin-bottom: 1rem;">üìã Required Columns</h4>
                <ul style="color: #94a3b8; line-height: 1.8;">
                    <li>timestamp</li>
                    <li>amount</li>
                    <li>from_address</li>
                    <li>to_address</li>
                </ul>
            </div>
        """, unsafe_allow_html=True)
    
    if uploaded_file is not None:
        process_uploaded_file(uploaded_file)

def process_uploaded_file(uploaded_file):
    try:
        # Show loading animation
        with st.spinner("üîÑ Processing your data..."):
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            # Load data
            status_text.text("üìÇ Loading CSV file...")
            progress_bar.progress(20)
            time.sleep(0.3)
            
            df = pd.read_csv(uploaded_file)
            
            # Validate
            status_text.text("‚úì Validating data structure...")
            progress_bar.progress(40)
            time.sleep(0.3)
            
            processor = st.session_state.data_processor
            validation = processor.validate_data(df)
            
            if not validation['valid']:
                st.error("‚ùå Data validation failed")
                for error in validation['errors']:
                    st.error(error)
                return
            
            # Clean
            status_text.text("üßπ Cleaning data...")
            progress_bar.progress(60)
            time.sleep(0.3)
            
            df_clean = processor.clean_data(df)
            
            # Extract features
            status_text.text("üîß Extracting features...")
            progress_bar.progress(80)
            time.sleep(0.3)
            
            df_features = processor.extract_features(df_clean)
            
            # Store
            st.session_state.data = df_features
            st.session_state.uploaded_filename = uploaded_file.name
            
            progress_bar.progress(100)
            status_text.empty()
            progress_bar.empty()
        
        # Success message
        st.success(f"‚úÖ Successfully processed {len(df_features):,} transactions!")
        
        # Show preview
        st.markdown("""
            <div class="glass-card">
                <h3 style="color: white; margin-bottom: 1rem;">üìä Data Preview</h3>
            </div>
        """, unsafe_allow_html=True)
        
        st.dataframe(df_features.head(10), use_container_width=True)
        
        # Show statistics
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown(metric_card("Rows", f"{len(df_features):,}", icon="üìä"), unsafe_allow_html=True)
        with col2:
            st.markdown(metric_card("Columns", f"{len(df_features.columns)}", icon="üìã"), unsafe_allow_html=True)
        with col3:
            unique_addresses = df_features['from_address'].nunique() if 'from_address' in df_features.columns else 0
            st.markdown(metric_card("Unique Addresses", f"{unique_addresses:,}", icon="üèõÔ∏è"), unsafe_allow_html=True)
        with col4:
            total_volume = df_features['amount'].sum() if 'amount' in df_features.columns else 0
            st.markdown(metric_card("Total Volume", f"${total_volume:,.0f}", icon="üí∞"), unsafe_allow_html=True)
        
    except Exception as e:
        st.error(f"‚ùå Error processing file: {str(e)}")
        logging.error(f"File processing error: {str(e)}", exc_info=True)

# Analysis page (continuing from previous code...)
def render_analysis():
    st.markdown("""
        <h2 style="color: white; margin-bottom: 2rem;">
            üîç Run Fraud Detection Analysis
        </h2>
    """, unsafe_allow_html=True)
    
    if st.session_state.data is None:
        st.warning("‚ö†Ô∏è Please upload data first")
        if st.button("Go to Upload Page"):
            st.session_state.current_page = 'upload'
            st.rerun()
        return
    
    df = st.session_state.data
    
    # Analysis configuration
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
            <div class="glass-card">
                <h3 style="color: white; margin-bottom: 1rem;">‚öôÔ∏è Analysis Configuration</h3>
            </div>
        """, unsafe_allow_html=True)
    
    with col2:
        contamination = st.slider(
            "Contamination Rate",
            min_value=0.01,
            max_value=0.3,
            value=0.1,
            step=0.01,
            help="Expected proportion of anomalies in the dataset"
        )
        
        risk_threshold = st.slider(
            "Risk Threshold",
            min_value=0.0,
            max_value=1.0,
            value=0.7,
            step=0.05,
            help="Threshold for flagging high-risk transactions"
        )
    
    # Run analysis button
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("üöÄ Run Complete Analysis", use_container_width=True, type="primary"):
            run_analysis(df, contamination, risk_threshold)
    
    # Show results if available
    if st.session_state.predictions is not None:
        display_analysis_results()

def run_analysis(df, contamination, risk_threshold):
    try:
        with st.spinner("ü§ñ Training AI model and analyzing transactions..."):
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            # Prepare features
            status_text.text("üîß Preparing features...")
            progress_bar.progress(20)
            time.sleep(0.5)
            
            feature_cols = [col for col in df.columns if col not in 
                          ['timestamp', 'from_address', 'to_address']]
            X = df[feature_cols].fillna(0)
            
            # Train model
            status_text.text("üß† Training AI model...")
            progress_bar.progress(40)
            
            model = st.session_state.model
            model.contamination = contamination
            model.train(X)
            
            progress_bar.progress(60)
            
            # Get predictions
            status_text.text("üéØ Detecting anomalies...")
            progress_bar.progress(80)
            
            predictions, risk_scores = model.predict(X)
            
            # Store results
            df['prediction'] = predictions
            df['risk_score'] = risk_scores
            df['is_anomaly'] = (predictions == -1).astype(int)
            df['risk_level'] = pd.cut(
                risk_scores,
                bins=[0, 30, 60, 80, 100],
                labels=['Low', 'Medium', 'High', 'Critical']
            )
            
            st.session_state.predictions = df
            st.session_state.analysis_complete = True
            st.session_state.analysis_timestamp = datetime.now()
            
            progress_bar.progress(100)
            time.sleep(0.5)
            
            status_text.empty()
            progress_bar.empty()
        
        st.success("‚úÖ Analysis complete!")
        st.balloons()
        
    except Exception as e:
        st.error(f"‚ùå Analysis failed: {str(e)}")
        logging.error(f"Analysis error: {str(e)}", exc_info=True)

def display_analysis_results():
    df = st.session_state.predictions
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Summary metrics
    st.markdown("""
        <div class="glass-card">
            <h3 style="color: white; margin-bottom: 1rem;">üìä Detection Summary</h3>
        </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns(4)
    
    n_anomalies = df['is_anomaly'].sum()
    anomaly_rate = n_anomalies / len(df) * 100
    high_risk = (df['risk_score'] > 70).sum()
    suspicious_volume = df[df['is_anomaly'] == 1]['amount'].sum() if 'amount' in df.columns else 0
    
    with col1:
        st.markdown(metric_card("Anomalies", f"{n_anomalies:,}", icon="‚ö†Ô∏è"), unsafe_allow_html=True)
    with col2:
        st.markdown(metric_card("Anomaly Rate", f"{anomaly_rate:.2f}%", icon="üìä"), unsafe_allow_html=True)
    with col3:
        st.markdown(metric_card("High Risk", f"{high_risk:,}", icon="üö®"), unsafe_allow_html=True)
    with col4:
        st.markdown(metric_card("Suspicious $", f"${suspicious_volume:,.0f}", icon="üí∞"), unsafe_allow_html=True)
    
    # Tabs for different views
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìà Risk Analysis",
        "üéØ Anomaly Detection",
        "‚è∞ Timeline",
        "üìã Transaction Table"
    ])
    
    with tab1:
        render_risk_analysis_tab(df)
    
    with tab2:
        render_anomaly_detection_tab(df)
    
    with tab3:
        render_timeline_tab(df)
    
    with tab4:
        render_transaction_table_tab(df)

def render_risk_analysis_tab(df):
    # Risk level distribution
    fig = px.histogram(
        df,
        x='risk_score',
        color='risk_level',
        title="Risk Score Distribution",
        labels={'risk_score': 'Risk Score', 'count': 'Number of Transactions'},
        color_discrete_map={
            'Low': '#10b981',
            'Medium': '#3b82f6',
            'High': '#f59e0b',
            'Critical': '#ef4444'
        },RetryLNContinuepython        marginal="box"
    )
    
    fig.update_layout(
        template="plotly_dark",
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        height=500,
        showlegend=True,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Risk level breakdown
    col1, col2 = st.columns(2)
    
    with col1:
        # Pie chart of risk levels
        risk_counts = df['risk_level'].value_counts()
        fig_pie = go.Figure(data=[go.Pie(
            labels=risk_counts.index,
            values=risk_counts.values,
            hole=0.4,
            marker=dict(colors=['#10b981', '#3b82f6', '#f59e0b', '#ef4444'])
        )])
        
        fig_pie.update_layout(
            title="Risk Level Distribution",
            template="plotly_dark",
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            height=400
        )
        
        st.plotly_chart(fig_pie, use_container_width=True)
    
    with col2:
        # Top risky transactions
        st.markdown("""
            <div class="glass-card">
                <h4 style="color: white; margin-bottom: 1rem;">üö® Top 10 Risky Transactions</h4>
            </div>
        """, unsafe_allow_html=True)
        
        top_risky = df.nlargest(10, 'risk_score')[['timestamp', 'amount', 'risk_score', 'risk_level']]
        st.dataframe(top_risky, use_container_width=True, hide_index=True)

def render_anomaly_detection_tab(df):
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Scatter plot of anomalies
        fig = px.scatter(
            df.sample(min(1000, len(df))),  # Sample for performance
            x=df.index[:min(1000, len(df))],
            y='risk_score',
            color='is_anomaly',
            title="Anomaly Detection Results",
            labels={'x': 'Transaction Index', 'y': 'Risk Score'},
            color_discrete_map={0: '#10b981', 1: '#ef4444'},
            hover_data=['amount'] if 'amount' in df.columns else None
        )
        
        fig.update_layout(
            template="plotly_dark",
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            height=500,
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Anomaly statistics
        st.markdown("""
            <div class="glass-card">
                <h4 style="color: white; margin-bottom: 1.5rem;">üìä Anomaly Statistics</h4>
            </div>
        """, unsafe_allow_html=True)
        
        total = len(df)
        anomalies = df['is_anomaly'].sum()
        normal = total - anomalies
        
        st.metric("Total Transactions", f"{total:,}")
        st.metric("Normal", f"{normal:,}", delta=f"{(normal/total*100):.1f}%")
        st.metric("Anomalies", f"{anomalies:,}", delta=f"{(anomalies/total*100):.1f}%", delta_color="inverse")
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        # Anomaly types breakdown
        st.markdown("""
            <div class="glass-card">
                <h5 style="color: white; margin-bottom: 1rem;">üîç Types of Anomalies Detected</h5>
                <ul style="color: #94a3b8; line-height: 2;">
                    <li>üí∞ Amount Anomalies: Unusual transaction values</li>
                    <li>‚è∞ Timing Anomalies: Transactions at unusual times</li>
                    <li>üîÑ Pattern Anomalies: Unusual flow patterns</li>
                </ul>
            </div>
        """, unsafe_allow_html=True)

def render_timeline_tab(df):
    if 'timestamp' not in df.columns:
        st.warning("‚ö†Ô∏è Timestamp data not available")
        return
    
    # Convert timestamp to datetime
    df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')
    df_time = df.dropna(subset=['timestamp']).copy()
    
    if len(df_time) == 0:
        st.warning("‚ö†Ô∏è No valid timestamp data")
        return
    
    # Date range filter
    col1, col2, col3 = st.columns([2, 2, 1])
    
    with col1:
        min_date = df_time['timestamp'].min().date()
        start_date = st.date_input("Start Date", min_date)
    
    with col2:
        max_date = df_time['timestamp'].max().date()
        end_date = st.date_input("End Date", max_date)
    
    with col3:
        st.markdown("<br>", unsafe_allow_html=True)
        if st.button("Apply Filter", use_container_width=True):
            df_time = df_time[
                (df_time['timestamp'].dt.date >= start_date) &
                (df_time['timestamp'].dt.date <= end_date)
            ]
    
    # Aggregate by time period
    df_time['date'] = df_time['timestamp'].dt.date
    daily_stats = df_time.groupby('date').agg({
        'amount': 'sum',
        'is_anomaly': 'sum',
        'risk_score': 'mean'
    }).reset_index()
    
    # Timeline chart
    fig = make_subplots(
        rows=2, cols=1,
        subplot_titles=("Transaction Volume Over Time", "Anomaly Detection Timeline"),
        specs=[[{"secondary_y": True}], [{"secondary_y": False}]],
        vertical_spacing=0.15
    )
    
    # Volume chart
    fig.add_trace(
        go.Scatter(
            x=daily_stats['date'],
            y=daily_stats['amount'],
            mode='lines+markers',
            name='Transaction Volume',
            line=dict(color='#6366f1', width=2),
            fill='tozeroy',
            fillcolor='rgba(99, 102, 241, 0.2)'
        ),
        row=1, col=1
    )
    
    # Anomaly count chart
    fig.add_trace(
        go.Bar(
            x=daily_stats['date'],
            y=daily_stats['is_anomaly'],
            name='Anomalies Detected',
            marker=dict(color='#ef4444')
        ),
        row=2, col=1
    )
    
    fig.update_layout(
        template="plotly_dark",
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        height=700,
        showlegend=True,
        hovermode='x unified'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Time-based statistics
    col1, col2, col3 = st.columns(3)
    
    with col1:
        peak_day = daily_stats.loc[daily_stats['amount'].idxmax(), 'date']
        st.markdown(metric_card("Peak Activity Day", str(peak_day), icon="üìÖ"), unsafe_allow_html=True)
    
    with col2:
        avg_daily = daily_stats['amount'].mean()
        st.markdown(metric_card("Avg Daily Volume", f"${avg_daily:,.0f}", icon="üìä"), unsafe_allow_html=True)
    
    with col3:
        total_anomalies = daily_stats['is_anomaly'].sum()
        st.markdown(metric_card("Total Anomalies", f"{total_anomalies:,.0f}", icon="‚ö†Ô∏è"), unsafe_allow_html=True)

def render_transaction_table_tab(df):
    st.markdown("""
        <div class="glass-card">
            <h4 style="color: white; margin-bottom: 1rem;">üîç Transaction Explorer</h4>
        </div>
    """, unsafe_allow_html=True)
    
    # Filters
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        show_anomalies = st.checkbox("Show Anomalies Only", value=False)
    
    with col2:
        risk_level_filter = st.multiselect(
            "Risk Level",
            options=['Low', 'Medium', 'High', 'Critical'],
            default=['Low', 'Medium', 'High', 'Critical']
        )
    
    with col3:
        min_risk = st.slider("Min Risk Score", 0, 100, 0)
    
    with col4:
        min_amount = st.number_input("Min Amount", value=0.0, step=100.0)
    
    # Apply filters
    filtered_df = df.copy()
    
    if show_anomalies:
        filtered_df = filtered_df[filtered_df['is_anomaly'] == 1]
    
    if risk_level_filter:
        filtered_df = filtered_df[filtered_df['risk_level'].isin(risk_level_filter)]
    
    filtered_df = filtered_df[filtered_df['risk_score'] >= min_risk]
    
    if 'amount' in filtered_df.columns:
        filtered_df = filtered_df[filtered_df['amount'] >= min_amount]
    
    # Display count
    st.info(f"üìä Showing {len(filtered_df):,} of {len(df):,} transactions")
    
    # Sort options
    col1, col2 = st.columns([3, 1])
    
    with col1:
        sort_by = st.selectbox(
            "Sort By",
            options=['risk_score', 'amount', 'timestamp'],
            index=0
        )
    
    with col2:
        sort_order = st.radio("Order", ["Descending", "Ascending"], horizontal=True)
    
    # Sort and display
    ascending = (sort_order == "Ascending")
    filtered_df_sorted = filtered_df.sort_values(sort_by, ascending=ascending)
    
    # Format the dataframe for display
    display_cols = ['timestamp', 'from_address', 'to_address', 'amount', 'risk_score', 'risk_level', 'is_anomaly']
    display_cols = [col for col in display_cols if col in filtered_df_sorted.columns]
    
    # Color code risk levels
    def highlight_risk(row):
        if row['risk_level'] == 'Critical':
            return ['background-color: rgba(239, 68, 68, 0.2)'] * len(row)
        elif row['risk_level'] == 'High':
            return ['background-color: rgba(245, 158, 11, 0.2)'] * len(row)
        elif row['risk_level'] == 'Medium':
            return ['background-color: rgba(59, 130, 246, 0.2)'] * len(row)
        else:
            return ['background-color: rgba(16, 185, 129, 0.1)'] * len(row)
    
    styled_df = filtered_df_sorted[display_cols].head(100).style.apply(highlight_risk, axis=1)
    
    st.dataframe(styled_df, use_container_width=True, height=500)
    
    # Export options
    col1, col2, col3 = st.columns([1, 1, 2])
    
    with col1:
        if st.button("üì• Export to CSV", use_container_width=True):
            csv = filtered_df_sorted.to_csv(index=False)
            st.download_button(
                label="Download CSV",
                data=csv,
                file_name=f"quantum_guard_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv",
                use_container_width=True
            )
    
    with col2:
        if st.button("üìä Export to Excel", use_container_width=True):
            # Note: Requires openpyxl
            try:
                from io import BytesIO
                output = BytesIO()
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    filtered_df_sorted.to_excel(writer, index=False, sheet_name='Transactions')
                excel_data = output.getvalue()
                
                st.download_button(
                    label="Download Excel",
                    data=excel_data,
                    file_name=f"quantum_guard_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True
                )
            except ImportError:
                st.error("Excel export requires openpyxl. Run: pip install openpyxl")

# AI Assistant page
def render_ai_assistant():
    st.markdown("""
        <div style="text-align: center; margin-bottom: 2rem;">
            <h2 style="color: white;">ü§ñ AI Transaction Assistant</h2>
            <p style="color: #94a3b8;">Ask questions about your blockchain data</p>
        </div>
    """, unsafe_allow_html=True)
    
    if st.session_state.predictions is None:
        st.warning("‚ö†Ô∏è Please run analysis first")
        return
    
    df = st.session_state.predictions
    
    # Chat interface
    st.markdown("""
        <div class="glass-card">
            <h4 style="color: white; margin-bottom: 1rem;">üí¨ Chat with AI</h4>
        </div>
    """, unsafe_allow_html=True)
    
    # Initialize chat history
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    
    # Display chat history
    for message in st.session_state.chat_history:
        role = message['role']
        content = message['content']
        
        if role == 'user':
            st.markdown(f"""
                <div style="
                    background: rgba(99, 102, 241, 0.2);
                    backdrop-filter: blur(10px);
                    border-radius: 12px;
                    padding: 1rem;
                    margin: 1rem 0;
                    border-left: 3px solid #6366f1;
                ">
                    <strong style="color: #a5b4fc;">You:</strong><br>
                    <span style="color: white;">{content}</span>
                </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
                <div style="
                    background: rgba(139, 92, 246, 0.2);
                    backdrop-filter: blur(10px);
                    border-radius: 12px;
                    padding: 1rem;
                    margin: 1rem 0;
                    border-left: 3px solid #8b5cf6;
                ">
                    <strong style="color: #c4b5fd;">AI Assistant:</strong><br>
                    <span style="color: white;">{content}</span>
                </div>
            """, unsafe_allow_html=True)
    
    # Quick question buttons
    st.markdown("**Quick Questions:**")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîù Highest risk transactions", use_container_width=True):
            handle_quick_question("highest_risk", df)
    
    with col2:
        if st.button("üìä Average transaction value", use_container_width=True):
            handle_quick_question("avg_value", df)
    
    with col3:
        if st.button("‚ö†Ô∏è Anomaly patterns", use_container_width=True):
            handle_quick_question("anomaly_patterns", df)
    
    # Text input
    user_query = st.text_input(
        "Ask a question:",
        placeholder="e.g., Which addresses have the most suspicious activity?",
        key="ai_query"
    )
    
    if st.button("Send", use_container_width=True, type="primary"):
        if user_query:
            process_ai_query(user_query, df)

def handle_quick_question(question_type, df):
    if question_type == "highest_risk":
        top_5 = df.nlargest(5, 'risk_score')[['from_address', 'to_address', 'amount', 'risk_score']]
        response = f"Here are the 5 highest risk transactions:\n\n{top_5.to_string(index=False)}"
        
    elif question_type == "avg_value":
        avg = df['amount'].mean() if 'amount' in df.columns else 0
        median = df['amount'].median() if 'amount' in df.columns else 0
        response = f"Average transaction value: ${avg:,.2f}\nMedian transaction value: ${median:,.2f}"
        
    elif question_type == "anomaly_patterns":
        anomaly_count = df['is_anomaly'].sum()
        anomaly_rate = (anomaly_count / len(df) * 100)
        high_risk = (df['risk_score'] > 70).sum()
        response = f"Detected {anomaly_count:,} anomalies ({anomaly_rate:.2f}% of total)\n{high_risk:,} transactions flagged as high risk"
    
    st.session_state.chat_history.append({'role': 'user', 'content': f"Quick question: {question_type}"})
    st.session_state.chat_history.append({'role': 'assistant', 'content': response})
    st.rerun()

def process_ai_query(query, df):
    # Simple keyword-based responses (can be enhanced with OpenAI API)
    query_lower = query.lower()
    
    if "highest" in query_lower and "risk" in query_lower:
        top_risks = df.nlargest(10, 'risk_score')
        response = f"The highest risk transactions have risk scores between {top_risks['risk_score'].min():.1f} and {top_risks['risk_score'].max():.1f}. There are {len(top_risks)} transactions in this category."
        
    elif "average" in query_lower or "mean" in query_lower:
        avg_risk = df['risk_score'].mean()
        avg_amount = df['amount'].mean() if 'amount' in df.columns else 0
        response = f"Average risk score: {avg_risk:.2f}\nAverage transaction amount: ${avg_amount:,.2f}"
        
    elif "anomal" in query_lower:
        anomaly_count = df['is_anomaly'].sum()
        response = f"Found {anomaly_count:,} anomalies out of {len(df):,} total transactions ({anomaly_count/len(df)*100:.2f}%)"
        
    elif "volume" in query_lower or "total" in query_lower:
        total_volume = df['amount'].sum() if 'amount' in df.columns else 0
        suspicious_volume = df[df['is_anomaly'] == 1]['amount'].sum() if 'amount' in df.columns else 0
        response = f"Total transaction volume: ${total_volume:,.2f}\nSuspicious transaction volume: ${suspicious_volume:,.2f}"
        
    else:
        response = "I can help you analyze:\n- Risk scores and high-risk transactions\n- Transaction volumes and statistics\n- Anomaly detection results\n- Network patterns\n\nPlease ask a more specific question!"
    
    st.session_state.chat_history.append({'role': 'user', 'content': query})
    st.session_state.chat_history.append({'role': 'assistant', 'content': response})
    st.rerun()

# Settings page
def render_settings():
    st.markdown("""
        <h2 style="color: white; margin-bottom: 2rem;">
            ‚öôÔ∏è Settings & Configuration
        </h2>
    """, unsafe_allow_html=True)
    
    tab1, tab2, tab3 = st.tabs(["ü§ñ Model Settings", "üóÑÔ∏è Database", "üé® Display"])
    
    with tab1:
        st.markdown("""
            <div class="glass-card">
                <h4 style="color: white; margin-bottom: 1rem;">Model Configuration</h4>
            </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            contamination = st.number_input("Contamination Rate", 0.01, 0.5, 0.1, 0.01)
            n_estimators = st.number_input("Number of Estimators", 50, 500, 100, 50)
            
        with col2:
            random_state = st.number_input("Random State", 0, 1000, 42, 1)
            max_samples = st.selectbox("Max Samples", ["auto", 256, 512, 1024])
        
        if st.button("üíæ Save Model Settings", use_container_width=True):
            st.success("‚úÖ Model settings saved!")
    
    with tab2:
        st.markdown("""
            <div class="glass-card">
                <h4 style="color: white; margin-bottom: 1rem;">Database Configuration</h4>
            </div>
        """, unsafe_allow_html=True)
        
        db_url = st.text_input("Database URL", type="password", placeholder="postgresql://user:pass@host:port/db")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üîå Test Connection", use_container_width=True):
                try:
                    session = db_manager.get_session()
                    st.success("‚úÖ Database connection successful!")
                    db_manager.close_session(session)
                except Exception as e:
                    st.error(f"‚ùå Connection failed: {str(e)}")
        
        with col2:
            if st.button("üíæ Save Database Settings", use_container_width=True):
                st.success("‚úÖ Database settings saved!")
    
    with tab3:
        st.markdown("""
            <div class="glass-card">
                <h4 style="color: white; margin-bottom: 1rem;">Display Preferences</h4>
            </div>
        """, unsafe_allow_html=True)
        
        theme = st.selectbox("Theme", ["Dark (Default)", "Light", "Auto"])
        chart_style = st.selectbox("Chart Style", ["Modern", "Classic", "Minimal"])
        show_animations = st.checkbox("Enable Animations", value=True)
        
        if st.button("üíæ Save Display Settings", use_container_width=True):
            st.success("‚úÖ Display settings saved!")

# Main navigation
def main():
    # Sidebar navigation
    with st.sidebar:
        st.markdown("""
            <div style="text-align: center; padding: 1rem 0 2rem 0;">
                <div style="font-size: 3rem;">üõ°Ô∏è</div>
                <h3 style="color: white; margin: 0.5rem 0;">QuantumGuard AI</h3>
                <p style="color: #94a3b8; font-size: 0.875rem;">Sentinel AI v2.0</p>
            </div>
        """, unsafe_allow_html=True)
        
        # Navigation buttons
        nav_options = {
            'home': ('üè†', 'Dashboard'),
            'upload': ('üìÅ', 'Upload Data'),
            'analysis': ('üîç', 'Run Analysis'),
            'ai_assistant': ('ü§ñ', 'AI Assistant'),
            'settings': ('‚öôÔ∏è', 'Settings')
        }
        
        for key, (icon, label) in nav_options.items():
            if st.button(f"{icon} {label}", use_container_width=True, key=f"nav_{key}"):
                st.session_state.current_page = key
        
        st.markdown("<br><br>", unsafe_allow_html=True)
        
        # Status indicator
        if st.session_state.data is not None:
            st.markdown("""
                <div class="glass-card" style="padding: 1rem;">
                    <div style="display: flex; align-items: center; gap: 0.5rem;">
                        <div style="width: 10px; height: 10px; background: #10b981; border-radius: 50%; animation: pulse 2s infinite;"></div>
                        <span style="color: #10b981; font-weight: 600;">Data Loaded</span>
                    </div>
                </div>
            """, unsafe_allow_html=True)
        
        if st.session_state.analysis_complete:
            st.markdown("""
                <div class="glass-card" style="padding: 1rem; margin-top: 0.5rem;">
                    <div style="display: flex; align-items: center; gap: 0.5rem;">
                        <div style="width: 10px; height: 10px; background: #6366f1; border-radius: 50%; animation: pulse 2s infinite;"></div>
                        <span style="color: #6366f1; font-weight: 600;">Analysis Complete</span>
                    </div>
                </div>
            """, unsafe_allow_html=True)
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        # System info
        st.markdown("""
            <div class="glass-card" style="padding: 1rem;">
                <h5 style="color: white; margin-bottom: 0.75rem;">üìä System Status</h5>
                <div style="color: #94a3b8; font-size: 0.875rem; line-height: 1.6;">
                    <div>üîê Security: Active</div>
                    <div>ü§ñ AI Model: Ready</div>
                    <div>‚òÅÔ∏è Cloud: Connected</div>
                </div>
            </div>
        """, unsafe_allow_html=True)
    
    # Main content area
    current_page = st.session_state.get('current_page', 'home')
    
    if current_page == 'home':
        render_home()
    elif current_page == 'upload':
        render_upload()
    elif current_page == 'analysis':
        render_analysis()
    elif current_page == 'ai_assistant':
        render_ai_assistant()
    elif current_page == 'settings':
        render_settings()

if __name__ == "__main__":
    main()
Additional Requirements File (requirements.txt)
txt# Core Dependencies
streamlit==1.28.0
pandas==2.1.0
numpy==1.24.3

# Machine Learning
scikit-learn==1.3.0
shap==0.42.1
joblib==1.3.2

# Visualization
plotly==5.17.0
matplotlib==3.7.2

# Database
sqlalchemy==2.0.20
psycopg2-binary==2.9.7

# Utilities
python-dotenv==1.0.0
python-dateutil==2.8.2

# Optional - for Excel export
openpyxl==3.1.2

# Logging and Monitoring
logging==0.4.9.6
Complete Replit Instructions
Create a .replit file:
tomlrun = "streamlit run modern_app.py --server.port 8080 --server.address 0.0.0.0"

[nix]
channel = "stable-22_11"

[deployment]
run = ["sh", "-c", "streamlit run modern_app.py --server.port 8080 --server.address 0.0.0.0"]
```

### **Environment Variables (Secrets in Replit)**

Add these in Replit Secrets:
```
DATABASE_URL=postgresql://your_db_url
OPENAI_API_KEY=your_openai_key (optional, for future AI features)
SECRET_KEY=your_secret_key_for_sessions
DEBUG=False
Key Improvements in This Version:

Modern Glassmorphism UI - Beautiful frosted glass effects
Smooth Animations - CSS transitions and loading states
Better Navigation - Intuitive sidebar with status indicators
Enhanced Visualizations - Plotly charts with dark theme
AI Assistant - Interactive chat interface
Advanced Filtering - Multiple filter options for data
Export Functionality - CSV and Excel download options
Responsive Design - Works on all screen sizes
Better Error Handling - Graceful error messages
Progress Indicators - Loading bars for all operations

This implementation should work perfectly in Replit and provide a professional, modern interface that's easy to use!RetryClaude can make mistakes. Please double-check responses. Sonnet 4.5